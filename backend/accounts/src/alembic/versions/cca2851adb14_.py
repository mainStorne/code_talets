"""empty message

Revision ID: cca2851adb14
Revises: 
Create Date: 2024-10-28 16:04:06.424811

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import fastapi_users_db_sqlalchemy

from sqlalchemy.ext.asyncio import AsyncSession, AsyncConnection
from app.db.models.users import User
from app.db.models.roles import Role
from app.schemas.users import UserCreate, RoleCreate
from fastapi_sqlalchemy_toolkit import ModelManager
from fastapi_users.password import PasswordHelper

from polyfactory.factories.sqlalchemy_factory import SQLAlchemyFactory
from pydantic import Field


class SeedUser(UserCreate):
    password: str = Field(serialization_alias='hashed_password')

    def model_dump(self, *args, **kwargs):
        return super().model_dump(by_alias=True, *args, **kwargs)


class Factory(SQLAlchemyFactory):
    __is_base_factory__ = True
    # __set_relationships__ = True


# revision identifiers, used by Alembic.
revision: str = 'cca2851adb14'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('roles',
                    sa.Column('name', sa.String(length=50), nullable=False),
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('name')
                    )
    op.create_table('users',
                    sa.Column('role_id', sa.Integer(), nullable=True),
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('email', sa.String(length=320), nullable=False),
                    sa.Column('hashed_password', sa.String(length=1024), nullable=False),
                    sa.Column('is_active', sa.Boolean(), nullable=False),
                    sa.Column('is_superuser', sa.Boolean(), nullable=False),
                    sa.Column('is_verified', sa.Boolean(), nullable=False),
                    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)

    # ### end Alembic commands ###
    async def seed_db(connection: AsyncConnection):
        session = AsyncSession(bind=connection, expire_on_commit=False)

        Factory.__async_session__ = session
        u_factory = Factory.create_factory(User)

        role_manager = ModelManager(Role)
        roles = await role_manager.bulk_create(session, [RoleCreate(name=role) for role in ['driver', 'manager']])
        manager = ModelManager(User)
        passwd = PasswordHelper()
        for role in roles:
            await manager.create(session, SeedUser(email=f'{role.name}@example.com', password=passwd.hash('string'), role_id=role.id))

        superuser = SeedUser(email='admin@example.com', password=passwd.hash('string'), is_superuser=True)
        await manager.create(session, superuser)

    op.run_async(seed_db)


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_table('roles')
    # ### end Alembic commands ###
